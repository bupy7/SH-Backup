#!/usr/bin/env bash

ROOT_PATH=$(cd $(dirname $0) && pwd)

. $ROOT_PATH/include/core

print 'Backup...' $BOLD$CYAN

TIMESTAMP=$(date +%s)
DATE_EXPIRE=$(expr $TIMESTAMP - $MAX_STORAGE_TIME)
case "$(uname -s)" in
    # OSX
    Darwin)
        TMP_DIR=$(mktemp -d -t backup)
        OLD_DIR=$(date -u -r $DATE_EXPIRE +%F)
        ;;

    # Linux
    Linux)
        TMP_DIR=$(mktemp -dt)
        OLD_DIR=$(date -u --date="@${DATE_EXPIRE}" +%F)
        ;;
        
    # Other
    *)
        print 'Your system is not supported.' $BOLD$RED
        exit
        ;;
esac

print '- Prepare files...'
cd $ROOT_DIR
tar -czf $TMP_DIR/root.tgz ./

print '- Prepare database...'
case $DB_TYPE in
    # MySQL
    mysql)
        mysqldump -u$DB_USERNAME -p$DB_PASSWORD -h$DB_HOST -P$DB_PORT $DB_NAME > $TMP_DIR/dump.sql
        ;;

    # PostgreSQL
    postgresql)
        # checking and/or updating ~/.pgpass
        escPass=$(echo $DB_PASSWORD | sed -E 's/(:|\\)/\\&/g')
        rexpEscPass=$(echo $escPass | sed -E 's/[?+{|()[]/\\&/g')
        rexp="^(${DB_HOST}|\*):(${DB_PORT}|\*):(${DB_NAME}|\*):${DB_USERNAME}:${rexpEscPass}$"
        if [ ! -f ~/.pgpass ] || ! grep -qE $rexp ~/.pgpass; then
            echo "${DB_HOST}:${DB_PORT}:${DB_NAME}:${DB_USERNAME}:${escPass}" >> ~/.pgpass
            chmod 600 ~/.pgpass
        fi

        pg_dump -U$DB_USERNAME -d$DB_NAME -h$DB_HOST -p$DB_PORT -w > $TMP_DIR/dump.sql
        ;;
        
    # Other
    *)
        print 'Your database is not supported.' $BOLD$RED
        exit
        ;;
esac

print '- Archiving...'
cd $TMP_DIR
tar -czf backup.tgz root.tgz dump.sql

print '- Uploading to FTP...'
dir_name=$(date -u +%F)
file_name="${TIMESTAMP}_${RANDOM}"
lftp <<EOF
connect $FTP_HOST
login $FTP_LOGIN $FTP_PASSWORD
set ftp:ssl-allow no
cd $FTP_ROOT
mkdir $dir_name || true
cd $dir_name
put backup.tgz -o ${file_name}.tgz
cd ..
rm -rf $OLD_DIR
EOF

print '- Cleaning tmp...'
rm -rf $TMP_DIR

print 'OK' $BOLD$GREEN
